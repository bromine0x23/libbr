cmake_minimum_required(VERSION 3.1)

aux_source_directory(.            LIBBR_SOURCES)
aux_source_directory(assert       LIBBR_SOURCES_ASSERT)
aux_source_directory(container    LIBBR_SOURCES_CONTAINER)
aux_source_directory(exception    LIBBR_SOURCES_EXCEPTION)
aux_source_directory(iterator     LIBBR_SOURCES_ITERATOR)
aux_source_directory(math         LIBBR_SOURCES_MATH)
aux_source_directory(memory       LIBBR_SOURCES_MEMORY)
aux_source_directory(type_operate LIBBR_SOURCES_TYPE_OPERATE)
aux_source_directory(type_traits  LIBBR_SOURCES_TYPE_TRAITS)
aux_source_directory(utility      LIBBR_SOURCES_UTILITY)

list(APPEND LIBBR_SOURCES ${LIBBR_SOURCES_ASSERT})
list(APPEND LIBBR_SOURCES ${LIBBR_SOURCES_CONTAINER})
list(APPEND LIBBR_SOURCES ${LIBBR_SOURCES_EXCEPTION})
list(APPEND LIBBR_SOURCES ${LIBBR_SOURCES_ITERATOR})
list(APPEND LIBBR_SOURCES ${LIBBR_SOURCES_MATH})
list(APPEND LIBBR_SOURCES ${LIBBR_SOURCES_MEMORY})
list(APPEND LIBBR_SOURCES ${LIBBR_SOURCES_TYPE_OPERATE})
list(APPEND LIBBR_SOURCES ${LIBBR_SOURCES_TYPE_TRAITS})
list(APPEND LIBBR_SOURCES ${LIBBR_SOURCES_UTILITY})

file(GLOB         LIBBR_HEADERS              *.hpp)
file(GLOB_RECURSE LIBBR_HEADERS_ASSERT       assert/*.hpp)
file(GLOB         LIBBR_HEADERS_CONFIG       config/*.hpp)
if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
	list(APPEND   LIBBR_HEADERS_CONFIG       config/compiler/clang.hpp)
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
	list(APPEND   LIBBR_HEADERS_CONFIG       config/compiler/gcc.hpp)
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Intel")
	list(APPEND   LIBBR_HEADERS_CONFIG       config/compiler/intel.hpp)
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
	list(APPEND   LIBBR_HEADERS_CONFIG       config/compiler/msvc.hpp)
endif()
if(UNIX OR MINGW)
	list(APPEND   LIBBR_HEADERS_CONFIG       config/platform/linux.hpp)
elseif(CYGWIN)
	list(APPEND   LIBBR_HEADERS_CONFIG       config/platform/cygwin.hpp)
elseif(WIN32)
	list(APPEND   LIBBR_HEADERS_CONFIG       config/platform/win32.hpp)
endif()
file(GLOB_RECURSE LIBBR_HEADERS_CONTAINER    container/*.hpp)
file(GLOB_RECURSE LIBBR_HEADERS_EXCEPTION    exception/*.hpp)
file(GLOB_RECURSE LIBBR_HEADERS_ITERATOR     iterator/*.hpp)
file(GLOB_RECURSE LIBBR_HEADERS_MATH         math/*.hpp)
file(GLOB_RECURSE LIBBR_HEADERS_MEMORY       memory/*.hpp)
file(GLOB_RECURSE LIBBR_HEADERS_TYPE_OPERATE type_operate/*.hpp)
file(GLOB_RECURSE LIBBR_HEADERS_TYPE_TRAITS  type_traits/*.hpp)
file(GLOB_RECURSE LIBBR_HEADERS_UTILITY      utility/*.hpp)

list(APPEND LIBBR_HEADERS ${LIBBR_HEADERS_ASSERT})
list(APPEND LIBBR_HEADERS ${LIBBR_HEADERS_CONFIG})
list(APPEND LIBBR_HEADERS ${LIBBR_HEADERS_CONTAINER})
list(APPEND LIBBR_HEADERS ${LIBBR_HEADERS_EXCEPTION})
list(APPEND LIBBR_HEADERS ${LIBBR_HEADERS_ITERATOR})
list(APPEND LIBBR_HEADERS ${LIBBR_HEADERS_MATH})
list(APPEND LIBBR_HEADERS ${LIBBR_HEADERS_MEMORY})
list(APPEND LIBBR_HEADERS ${LIBBR_HEADERS_TYPE_OPERATE})
list(APPEND LIBBR_HEADERS ${LIBBR_HEADERS_TYPE_TRAITS})
list(APPEND LIBBR_HEADERS ${LIBBR_SOURCES_UTILITY})

if (LIBBR_ENABLE_SHARED)
	add_library(br SHARED ${LIBBR_SOURCES} ${LIBBR_HEADERS})
else()
	add_library(br STATIC ${LIBBR_SOURCES} ${LIBBR_HEADERS})
endif()

string(REPLACE ";" " " LIBBR_COMPILE_FLAGS "${LIBBR_COMPILE_FLAGS}")
string(REPLACE ";" " " LIBBR_LINK_FLAGS "${LIBBR_LINK_FLAGS}")

set_target_properties(br
	PROPERTIES
	COMPILE_FLAGS "${LIBBR_COMPILE_FLAGS}"
	LINK_FLAGS    "${LIBBR_LINK_FLAGS}"
	OUTPUT_NAME   "br"
	VERSION       "1.0"
	SOVERSION     "1"
)