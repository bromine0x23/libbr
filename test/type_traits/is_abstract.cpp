#include "test.hpp"

#include<libbr/type_traits/is_abstract.hpp>

using namespace BR;

struct C00 {};
struct C01 { virtual void f(void) = 0; };
struct C02 { private: virtual void f(void) = 0; };
struct C03 : public C00 {};
struct C04 : public C01 {};
struct C05 : public C02 {};
struct C06 : public C01 { virtual void f(void) {} };
struct C07 : public C02 { private: virtual void f(void) {} };
struct C08 : public C01, public C02 {};
struct C09 : public C08 { virtual void f(void) {} };
struct C10 : public C01 { virtual void f(void) {}; virtual void h(void) = 0; };
struct C11 : public C10 { virtual void h(void) {} };
struct C12 : public virtual C01 {};
struct C13 : public virtual C02 {};
struct C14 : public C12, public C13 {};
struct C15 : public C14 { virtual void f(void) {} };
struct C16 : public C01 { virtual void f(void) = 0; };
struct C17 : public C02 { private: virtual void f(void) = 0; };
struct C18 { virtual void f(void) {} };
struct C19 { virtual ~C19(void) {} virtual void f(void) {} };
struct C20 : public C19 { virtual void f(void) = 0; };
struct C21 : public C19 { virtual void f(void) {} };
struct C22 { virtual void g(void) = 0; virtual void h(void) = 0; };
struct C23 : public C22 { virtual void g(void) {}  virtual void h(void) {} };
struct C24 { virtual ~C24(void) = 0; };
struct C25 { virtual ~C25(void) = 0; }; C25::~C25(void) {}
struct C26 : public C25 { virtual ~C26(void) = 0; }; C26::~C26(void) {}
struct C27 : public C26 { virtual ~C27(void) {} };
struct C28 { virtual void f(void) = 0; }; void C28::f(void) {}
struct C29 : public C28 {};
struct C30 : public C29 { virtual void f() {} };
struct C31 : public C29 { virtual void f(); }; void C31::f(void) {}
struct C32 : public virtual C00 {};

template<typename T> struct TC00 {};
template<typename T> struct TC01 { virtual void f(void) = 0; };
template<typename T> struct TC02 { private: virtual void f(void) = 0; };
template<typename T> struct TC03 : public TC00<T> {};
template<typename T> struct TC04 : public TC01<T> {};
template<typename T> struct TC05 : public TC02<T> {};
template<typename T> struct TC06 : public TC01<T> { virtual void f(void) {} };
template<typename T> struct TC07 : public TC02<T> { private: virtual void f(void) {} };
template<typename T> struct TC08 : public TC01<T>, public TC02<T> {};
template<typename T> struct TC09 : public TC08<T> { virtual void f(void) {} };
template<typename T> struct TC10 : public TC01<T> { virtual void f(void) {}; virtual void h(void) = 0; };
template<typename T> struct TC11 : public TC10<T> { virtual void h(void) {} };
template<typename T> struct TC12 : public virtual TC01<T> {};
template<typename T> struct TC13 : public virtual TC02<T> {};
template<typename T> struct TC14 : public TC12<T>, public TC13<T> {};
template<typename T> struct TC15 : public TC14<T> { virtual void f(void) {} };
template<typename T> struct TC16 : public TC01<T> { virtual void f(void) = 0; };
template<typename T> struct TC17 : public TC02<T> { private: virtual void f(void) = 0; };
template<typename T> struct TC18 { virtual void f(void) {} };
template<typename T> struct TC19 { virtual ~TC19(void) {} virtual void f(void) {} };
template<typename T> struct TC20 : public TC19<T> { virtual void f(void) = 0; };
template<typename T> struct TC21 : public TC19<T> { virtual void f(void) {} };
template<typename T> struct TC22 { virtual void g(void) = 0; virtual void h(void) = 0; };
template<typename T> struct TC23 : public TC22<T> { virtual void g(void) {}  virtual void h(void) {} };
template<typename T> struct TC24 { virtual ~TC24(void) = 0; };
template<typename T> struct TC25 { virtual ~TC25(void) = 0; }; template<typename T> TC25<T>::~TC25(void) {}
template<typename T> struct TC26 : public TC25<T> { virtual ~TC26(void) = 0; }; template<typename T> TC26<T>::~TC26(void) {}
template<typename T> struct TC27 : public TC26<T> { virtual ~TC27(void) {} }; 
template<typename T> struct TC28 { virtual void f(void) = 0; }; template<typename T> void TC28<T>::f(void) {}
template<typename T> struct TC29 : public TC28<T> {};
template<typename T> struct TC30 : public TC29<T> { virtual void f() {} };
template<typename T> struct TC31 : public TC29<T> { virtual void f(); }; template<typename T> void TC31<T>::f(void) {}
template<typename T> struct TC32 : public virtual TC00<T> {};

TEST(TypeTraits, IsAbstract) {
	IS_TRAITS_CHECK(false, Abstract, C00);
	IS_TRAITS_CHECK(true , Abstract, C01);
	IS_TRAITS_CHECK(true , Abstract, C02);
	IS_TRAITS_CHECK(false, Abstract, C03);
	IS_TRAITS_CHECK(true , Abstract, C04);
	IS_TRAITS_CHECK(true , Abstract, C05);
	IS_TRAITS_CHECK(false, Abstract, C06);
	IS_TRAITS_CHECK(false, Abstract, C07);
	IS_TRAITS_CHECK(true , Abstract, C08);
	IS_TRAITS_CHECK(false, Abstract, C09);
	IS_TRAITS_CHECK(true , Abstract, C10);
	IS_TRAITS_CHECK(false, Abstract, C11);
	IS_TRAITS_CHECK(true , Abstract, C12);
	IS_TRAITS_CHECK(true , Abstract, C13);
	IS_TRAITS_CHECK(true , Abstract, C14);
	IS_TRAITS_CHECK(false, Abstract, C15);
	IS_TRAITS_CHECK(true , Abstract, C16);
	IS_TRAITS_CHECK(true , Abstract, C17);
	IS_TRAITS_CHECK(false, Abstract, C18);
	IS_TRAITS_CHECK(false, Abstract, C19);
	IS_TRAITS_CHECK(true , Abstract, C20);
	IS_TRAITS_CHECK(false, Abstract, C21);
	IS_TRAITS_CHECK(true , Abstract, C22);
	IS_TRAITS_CHECK(false, Abstract, C23);
	IS_TRAITS_CHECK(true , Abstract, C24);
	IS_TRAITS_CHECK(true , Abstract, C25);
	IS_TRAITS_CHECK(true , Abstract, C26);
	IS_TRAITS_CHECK(false, Abstract, C27);
	IS_TRAITS_CHECK(true , Abstract, C28);
	IS_TRAITS_CHECK(true , Abstract, C29);
	IS_TRAITS_CHECK(false, Abstract, C30);
	IS_TRAITS_CHECK(false, Abstract, C31);
	IS_TRAITS_CHECK(false, Abstract, C32);

	IS_TRAITS_CHECK(false, Abstract, C00 const);
	IS_TRAITS_CHECK(true , Abstract, C01 const);
	IS_TRAITS_CHECK(true , Abstract, C02 const);
	IS_TRAITS_CHECK(false, Abstract, C03 const);
	IS_TRAITS_CHECK(true , Abstract, C04 const);
	IS_TRAITS_CHECK(true , Abstract, C05 const);
	IS_TRAITS_CHECK(false, Abstract, C06 const);
	IS_TRAITS_CHECK(false, Abstract, C07 const);
	IS_TRAITS_CHECK(true , Abstract, C08 const);
	IS_TRAITS_CHECK(false, Abstract, C09 const);
	IS_TRAITS_CHECK(true , Abstract, C10 const);
	IS_TRAITS_CHECK(false, Abstract, C11 const);
	IS_TRAITS_CHECK(true , Abstract, C12 const);
	IS_TRAITS_CHECK(true , Abstract, C13 const);
	IS_TRAITS_CHECK(true , Abstract, C14 const);
	IS_TRAITS_CHECK(false, Abstract, C15 const);
	IS_TRAITS_CHECK(true , Abstract, C16 const);
	IS_TRAITS_CHECK(true , Abstract, C17 const);
	IS_TRAITS_CHECK(false, Abstract, C18 const);
	IS_TRAITS_CHECK(false, Abstract, C19 const);
	IS_TRAITS_CHECK(true , Abstract, C20 const);
	IS_TRAITS_CHECK(false, Abstract, C21 const);
	IS_TRAITS_CHECK(true , Abstract, C22 const);
	IS_TRAITS_CHECK(false, Abstract, C23 const);
	IS_TRAITS_CHECK(true , Abstract, C24 const);
	IS_TRAITS_CHECK(true , Abstract, C25 const);
	IS_TRAITS_CHECK(true , Abstract, C26 const);
	IS_TRAITS_CHECK(false, Abstract, C27 const);
	IS_TRAITS_CHECK(true , Abstract, C28 const);
	IS_TRAITS_CHECK(true , Abstract, C29 const);
	IS_TRAITS_CHECK(false, Abstract, C30 const);
	IS_TRAITS_CHECK(false, Abstract, C31 const);
	IS_TRAITS_CHECK(false, Abstract, C32 const);

	IS_TRAITS_CHECK(false, Abstract, C00 volatile);
	IS_TRAITS_CHECK(true , Abstract, C01 volatile);
	IS_TRAITS_CHECK(true , Abstract, C02 volatile);
	IS_TRAITS_CHECK(false, Abstract, C03 volatile);
	IS_TRAITS_CHECK(true , Abstract, C04 volatile);
	IS_TRAITS_CHECK(true , Abstract, C05 volatile);
	IS_TRAITS_CHECK(false, Abstract, C06 volatile);
	IS_TRAITS_CHECK(false, Abstract, C07 volatile);
	IS_TRAITS_CHECK(true , Abstract, C08 volatile);
	IS_TRAITS_CHECK(false, Abstract, C09 volatile);
	IS_TRAITS_CHECK(true , Abstract, C10 volatile);
	IS_TRAITS_CHECK(false, Abstract, C11 volatile);
	IS_TRAITS_CHECK(true , Abstract, C12 volatile);
	IS_TRAITS_CHECK(true , Abstract, C13 volatile);
	IS_TRAITS_CHECK(true , Abstract, C14 volatile);
	IS_TRAITS_CHECK(false, Abstract, C15 volatile);
	IS_TRAITS_CHECK(true , Abstract, C16 volatile);
	IS_TRAITS_CHECK(true , Abstract, C17 volatile);
	IS_TRAITS_CHECK(false, Abstract, C18 volatile);
	IS_TRAITS_CHECK(false, Abstract, C19 volatile);
	IS_TRAITS_CHECK(true , Abstract, C20 volatile);
	IS_TRAITS_CHECK(false, Abstract, C21 volatile);
	IS_TRAITS_CHECK(true , Abstract, C22 volatile);
	IS_TRAITS_CHECK(false, Abstract, C23 volatile);
	IS_TRAITS_CHECK(true , Abstract, C24 volatile);
	IS_TRAITS_CHECK(true , Abstract, C25 volatile);
	IS_TRAITS_CHECK(true , Abstract, C26 volatile);
	IS_TRAITS_CHECK(false, Abstract, C27 volatile);
	IS_TRAITS_CHECK(true , Abstract, C28 volatile);
	IS_TRAITS_CHECK(true , Abstract, C29 volatile);
	IS_TRAITS_CHECK(false, Abstract, C30 volatile);
	IS_TRAITS_CHECK(false, Abstract, C31 volatile);
	IS_TRAITS_CHECK(false, Abstract, C32 volatile);

	IS_TRAITS_CHECK(false, Abstract, C00 const volatile);
	IS_TRAITS_CHECK(true , Abstract, C01 const volatile);
	IS_TRAITS_CHECK(true , Abstract, C02 const volatile);
	IS_TRAITS_CHECK(false, Abstract, C03 const volatile);
	IS_TRAITS_CHECK(true , Abstract, C04 const volatile);
	IS_TRAITS_CHECK(true , Abstract, C05 const volatile);
	IS_TRAITS_CHECK(false, Abstract, C06 const volatile);
	IS_TRAITS_CHECK(false, Abstract, C07 const volatile);
	IS_TRAITS_CHECK(true , Abstract, C08 const volatile);
	IS_TRAITS_CHECK(false, Abstract, C09 const volatile);
	IS_TRAITS_CHECK(true , Abstract, C10 const volatile);
	IS_TRAITS_CHECK(false, Abstract, C11 const volatile);
	IS_TRAITS_CHECK(true , Abstract, C12 const volatile);
	IS_TRAITS_CHECK(true , Abstract, C13 const volatile);
	IS_TRAITS_CHECK(true , Abstract, C14 const volatile);
	IS_TRAITS_CHECK(false, Abstract, C15 const volatile);
	IS_TRAITS_CHECK(true , Abstract, C16 const volatile);
	IS_TRAITS_CHECK(true , Abstract, C17 const volatile);
	IS_TRAITS_CHECK(false, Abstract, C18 const volatile);
	IS_TRAITS_CHECK(false, Abstract, C19 const volatile);
	IS_TRAITS_CHECK(true , Abstract, C20 const volatile);
	IS_TRAITS_CHECK(false, Abstract, C21 const volatile);
	IS_TRAITS_CHECK(true , Abstract, C22 const volatile);
	IS_TRAITS_CHECK(false, Abstract, C23 const volatile);
	IS_TRAITS_CHECK(true , Abstract, C24 const volatile);
	IS_TRAITS_CHECK(true , Abstract, C25 const volatile);
	IS_TRAITS_CHECK(true , Abstract, C26 const volatile);
	IS_TRAITS_CHECK(false, Abstract, C27 const volatile);
	IS_TRAITS_CHECK(true , Abstract, C28 const volatile);
	IS_TRAITS_CHECK(true , Abstract, C29 const volatile);
	IS_TRAITS_CHECK(false, Abstract, C30 const volatile);
	IS_TRAITS_CHECK(false, Abstract, C31 const volatile);
	IS_TRAITS_CHECK(false, Abstract, C32 const volatile);

	IS_TRAITS_CHECK(false, Abstract, C00 &);
	IS_TRAITS_CHECK(false, Abstract, C01 &);
	IS_TRAITS_CHECK(false, Abstract, C02 &);
	IS_TRAITS_CHECK(false, Abstract, C03 &);
	IS_TRAITS_CHECK(false, Abstract, C04 &);
	IS_TRAITS_CHECK(false, Abstract, C05 &);
	IS_TRAITS_CHECK(false, Abstract, C06 &);
	IS_TRAITS_CHECK(false, Abstract, C07 &);
	IS_TRAITS_CHECK(false, Abstract, C08 &);
	IS_TRAITS_CHECK(false, Abstract, C09 &);
	IS_TRAITS_CHECK(false, Abstract, C10 &);
	IS_TRAITS_CHECK(false, Abstract, C11 &);
	IS_TRAITS_CHECK(false, Abstract, C12 &);
	IS_TRAITS_CHECK(false, Abstract, C13 &);
	IS_TRAITS_CHECK(false, Abstract, C14 &);
	IS_TRAITS_CHECK(false, Abstract, C15 &);
	IS_TRAITS_CHECK(false, Abstract, C16 &);
	IS_TRAITS_CHECK(false, Abstract, C17 &);
	IS_TRAITS_CHECK(false, Abstract, C18 &);
	IS_TRAITS_CHECK(false, Abstract, C19 &);
	IS_TRAITS_CHECK(false, Abstract, C20 &);
	IS_TRAITS_CHECK(false, Abstract, C21 &);
	IS_TRAITS_CHECK(false, Abstract, C22 &);
	IS_TRAITS_CHECK(false, Abstract, C23 &);
	IS_TRAITS_CHECK(false, Abstract, C24 &);
	IS_TRAITS_CHECK(false, Abstract, C25 &);
	IS_TRAITS_CHECK(false, Abstract, C26 &);
	IS_TRAITS_CHECK(false, Abstract, C27 &);
	IS_TRAITS_CHECK(false, Abstract, C28 &);
	IS_TRAITS_CHECK(false, Abstract, C29 &);
	IS_TRAITS_CHECK(false, Abstract, C30 &);
	IS_TRAITS_CHECK(false, Abstract, C31 &);
	IS_TRAITS_CHECK(false, Abstract, C32 &);

	IS_TRAITS_CHECK(false, Abstract, TC00<int>);
	IS_TRAITS_CHECK(true , Abstract, TC01<int>);
	IS_TRAITS_CHECK(true , Abstract, TC02<int>);
	IS_TRAITS_CHECK(false, Abstract, TC03<int>);
	IS_TRAITS_CHECK(true , Abstract, TC04<int>);
	IS_TRAITS_CHECK(true , Abstract, TC05<int>);
	IS_TRAITS_CHECK(false, Abstract, TC06<int>);
	IS_TRAITS_CHECK(false, Abstract, TC07<int>);
	IS_TRAITS_CHECK(true , Abstract, TC08<int>);
	IS_TRAITS_CHECK(false, Abstract, TC09<int>);
	IS_TRAITS_CHECK(true , Abstract, TC10<int>);
	IS_TRAITS_CHECK(false, Abstract, TC11<int>);
	IS_TRAITS_CHECK(true , Abstract, TC12<int>);
	IS_TRAITS_CHECK(true , Abstract, TC13<int>);
	IS_TRAITS_CHECK(true , Abstract, TC14<int>);
	IS_TRAITS_CHECK(false, Abstract, TC15<int>);
	IS_TRAITS_CHECK(true , Abstract, TC16<int>);
	IS_TRAITS_CHECK(true , Abstract, TC17<int>);
	IS_TRAITS_CHECK(false, Abstract, TC18<int>);
	IS_TRAITS_CHECK(false, Abstract, TC19<int>);
	IS_TRAITS_CHECK(true , Abstract, TC20<int>);
	IS_TRAITS_CHECK(false, Abstract, TC21<int>);
	IS_TRAITS_CHECK(true , Abstract, TC22<int>);
	IS_TRAITS_CHECK(false, Abstract, TC23<int>);
	IS_TRAITS_CHECK(true , Abstract, TC24<int>);
	IS_TRAITS_CHECK(true , Abstract, TC25<int>);
	IS_TRAITS_CHECK(true , Abstract, TC26<int>);
	IS_TRAITS_CHECK(false, Abstract, TC27<int>);
	IS_TRAITS_CHECK(true , Abstract, TC28<int>);
	IS_TRAITS_CHECK(true , Abstract, TC29<int>);
	IS_TRAITS_CHECK(false, Abstract, TC30<int>);
	IS_TRAITS_CHECK(false, Abstract, TC31<int>);
	IS_TRAITS_CHECK(false, Abstract, TC32<int>);

	IS_TRAITS_CHECK(false, Abstract, TC00<int> const);
	IS_TRAITS_CHECK(true , Abstract, TC01<int> const);
	IS_TRAITS_CHECK(true , Abstract, TC02<int> const);
	IS_TRAITS_CHECK(false, Abstract, TC03<int> const);
	IS_TRAITS_CHECK(true , Abstract, TC04<int> const);
	IS_TRAITS_CHECK(true , Abstract, TC05<int> const);
	IS_TRAITS_CHECK(false, Abstract, TC06<int> const);
	IS_TRAITS_CHECK(false, Abstract, TC07<int> const);
	IS_TRAITS_CHECK(true , Abstract, TC08<int> const);
	IS_TRAITS_CHECK(false, Abstract, TC09<int> const);
	IS_TRAITS_CHECK(true , Abstract, TC10<int> const);
	IS_TRAITS_CHECK(false, Abstract, TC11<int> const);
	IS_TRAITS_CHECK(true , Abstract, TC12<int> const);
	IS_TRAITS_CHECK(true , Abstract, TC13<int> const);
	IS_TRAITS_CHECK(true , Abstract, TC14<int> const);
	IS_TRAITS_CHECK(false, Abstract, TC15<int> const);
	IS_TRAITS_CHECK(true , Abstract, TC16<int> const);
	IS_TRAITS_CHECK(true , Abstract, TC17<int> const);
	IS_TRAITS_CHECK(false, Abstract, TC18<int> const);
	IS_TRAITS_CHECK(false, Abstract, TC19<int> const);
	IS_TRAITS_CHECK(true , Abstract, TC20<int> const);
	IS_TRAITS_CHECK(false, Abstract, TC21<int> const);
	IS_TRAITS_CHECK(true , Abstract, TC22<int> const);
	IS_TRAITS_CHECK(false, Abstract, TC23<int> const);
	IS_TRAITS_CHECK(true , Abstract, TC24<int> const);
	IS_TRAITS_CHECK(true , Abstract, TC25<int> const);
	IS_TRAITS_CHECK(true , Abstract, TC26<int> const);
	IS_TRAITS_CHECK(false, Abstract, TC27<int> const);
	IS_TRAITS_CHECK(true , Abstract, TC28<int> const);
	IS_TRAITS_CHECK(true , Abstract, TC29<int> const);
	IS_TRAITS_CHECK(false, Abstract, TC30<int> const);
	IS_TRAITS_CHECK(false, Abstract, TC31<int> const);
	IS_TRAITS_CHECK(false, Abstract, TC32<int> const);

	IS_TRAITS_CHECK(false, Abstract, TC00<int> volatile);
	IS_TRAITS_CHECK(true , Abstract, TC01<int> volatile);
	IS_TRAITS_CHECK(true , Abstract, TC02<int> volatile);
	IS_TRAITS_CHECK(false, Abstract, TC03<int> volatile);
	IS_TRAITS_CHECK(true , Abstract, TC04<int> volatile);
	IS_TRAITS_CHECK(true , Abstract, TC05<int> volatile);
	IS_TRAITS_CHECK(false, Abstract, TC06<int> volatile);
	IS_TRAITS_CHECK(false, Abstract, TC07<int> volatile);
	IS_TRAITS_CHECK(true , Abstract, TC08<int> volatile);
	IS_TRAITS_CHECK(false, Abstract, TC09<int> volatile);
	IS_TRAITS_CHECK(true , Abstract, TC10<int> volatile);
	IS_TRAITS_CHECK(false, Abstract, TC11<int> volatile);
	IS_TRAITS_CHECK(true , Abstract, TC12<int> volatile);
	IS_TRAITS_CHECK(true , Abstract, TC13<int> volatile);
	IS_TRAITS_CHECK(true , Abstract, TC14<int> volatile);
	IS_TRAITS_CHECK(false, Abstract, TC15<int> volatile);
	IS_TRAITS_CHECK(true , Abstract, TC16<int> volatile);
	IS_TRAITS_CHECK(true , Abstract, TC17<int> volatile);
	IS_TRAITS_CHECK(false, Abstract, TC18<int> volatile);
	IS_TRAITS_CHECK(false, Abstract, TC19<int> volatile);
	IS_TRAITS_CHECK(true , Abstract, TC20<int> volatile);
	IS_TRAITS_CHECK(false, Abstract, TC21<int> volatile);
	IS_TRAITS_CHECK(true , Abstract, TC22<int> volatile);
	IS_TRAITS_CHECK(false, Abstract, TC23<int> volatile);
	IS_TRAITS_CHECK(true , Abstract, TC24<int> volatile);
	IS_TRAITS_CHECK(true , Abstract, TC25<int> volatile);
	IS_TRAITS_CHECK(true , Abstract, TC26<int> volatile);
	IS_TRAITS_CHECK(false, Abstract, TC27<int> volatile);
	IS_TRAITS_CHECK(true , Abstract, TC28<int> volatile);
	IS_TRAITS_CHECK(true , Abstract, TC29<int> volatile);
	IS_TRAITS_CHECK(false, Abstract, TC30<int> volatile);
	IS_TRAITS_CHECK(false, Abstract, TC31<int> volatile);
	IS_TRAITS_CHECK(false, Abstract, TC32<int> volatile);

	IS_TRAITS_CHECK(false, Abstract, TC00<int> const volatile);
	IS_TRAITS_CHECK(true , Abstract, TC01<int> const volatile);
	IS_TRAITS_CHECK(true , Abstract, TC02<int> const volatile);
	IS_TRAITS_CHECK(false, Abstract, TC03<int> const volatile);
	IS_TRAITS_CHECK(true , Abstract, TC04<int> const volatile);
	IS_TRAITS_CHECK(true , Abstract, TC05<int> const volatile);
	IS_TRAITS_CHECK(false, Abstract, TC06<int> const volatile);
	IS_TRAITS_CHECK(false, Abstract, TC07<int> const volatile);
	IS_TRAITS_CHECK(true , Abstract, TC08<int> const volatile);
	IS_TRAITS_CHECK(false, Abstract, TC09<int> const volatile);
	IS_TRAITS_CHECK(true , Abstract, TC10<int> const volatile);
	IS_TRAITS_CHECK(false, Abstract, TC11<int> const volatile);
	IS_TRAITS_CHECK(true , Abstract, TC12<int> const volatile);
	IS_TRAITS_CHECK(true , Abstract, TC13<int> const volatile);
	IS_TRAITS_CHECK(true , Abstract, TC14<int> const volatile);
	IS_TRAITS_CHECK(false, Abstract, TC15<int> const volatile);
	IS_TRAITS_CHECK(true , Abstract, TC16<int> const volatile);
	IS_TRAITS_CHECK(true , Abstract, TC17<int> const volatile);
	IS_TRAITS_CHECK(false, Abstract, TC18<int> const volatile);
	IS_TRAITS_CHECK(false, Abstract, TC19<int> const volatile);
	IS_TRAITS_CHECK(true , Abstract, TC20<int> const volatile);
	IS_TRAITS_CHECK(false, Abstract, TC21<int> const volatile);
	IS_TRAITS_CHECK(true , Abstract, TC22<int> const volatile);
	IS_TRAITS_CHECK(false, Abstract, TC23<int> const volatile);
	IS_TRAITS_CHECK(true , Abstract, TC24<int> const volatile);
	IS_TRAITS_CHECK(true , Abstract, TC25<int> const volatile);
	IS_TRAITS_CHECK(true , Abstract, TC26<int> const volatile);
	IS_TRAITS_CHECK(false, Abstract, TC27<int> const volatile);
	IS_TRAITS_CHECK(true , Abstract, TC28<int> const volatile);
	IS_TRAITS_CHECK(true , Abstract, TC29<int> const volatile);
	IS_TRAITS_CHECK(false, Abstract, TC30<int> const volatile);
	IS_TRAITS_CHECK(false, Abstract, TC31<int> const volatile);
	IS_TRAITS_CHECK(false, Abstract, TC32<int> const volatile);


	IS_TRAITS_CHECK(false, Abstract, TC00<int> &);
	IS_TRAITS_CHECK(false, Abstract, TC01<int> &);
	IS_TRAITS_CHECK(false, Abstract, TC02<int> &);
	IS_TRAITS_CHECK(false, Abstract, TC03<int> &);
	IS_TRAITS_CHECK(false, Abstract, TC04<int> &);
	IS_TRAITS_CHECK(false, Abstract, TC05<int> &);
	IS_TRAITS_CHECK(false, Abstract, TC06<int> &);
	IS_TRAITS_CHECK(false, Abstract, TC07<int> &);
	IS_TRAITS_CHECK(false, Abstract, TC08<int> &);
	IS_TRAITS_CHECK(false, Abstract, TC09<int> &);
	IS_TRAITS_CHECK(false, Abstract, TC10<int> &);
	IS_TRAITS_CHECK(false, Abstract, TC11<int> &);
	IS_TRAITS_CHECK(false, Abstract, TC12<int> &);
	IS_TRAITS_CHECK(false, Abstract, TC13<int> &);
	IS_TRAITS_CHECK(false, Abstract, TC14<int> &);
	IS_TRAITS_CHECK(false, Abstract, TC15<int> &);
	IS_TRAITS_CHECK(false, Abstract, TC16<int> &);
	IS_TRAITS_CHECK(false, Abstract, TC17<int> &);
	IS_TRAITS_CHECK(false, Abstract, TC18<int> &);
	IS_TRAITS_CHECK(false, Abstract, TC19<int> &);
	IS_TRAITS_CHECK(false, Abstract, TC20<int> &);
	IS_TRAITS_CHECK(false, Abstract, TC21<int> &);
	IS_TRAITS_CHECK(false, Abstract, TC22<int> &);
	IS_TRAITS_CHECK(false, Abstract, TC23<int> &);
	IS_TRAITS_CHECK(false, Abstract, TC24<int> &);
	IS_TRAITS_CHECK(false, Abstract, TC25<int> &);
	IS_TRAITS_CHECK(false, Abstract, TC26<int> &);
	IS_TRAITS_CHECK(false, Abstract, TC27<int> &);
	IS_TRAITS_CHECK(false, Abstract, TC28<int> &);
	IS_TRAITS_CHECK(false, Abstract, TC29<int> &);
	IS_TRAITS_CHECK(false, Abstract, TC30<int> &);
	IS_TRAITS_CHECK(false, Abstract, TC31<int> &);
	IS_TRAITS_CHECK(false, Abstract, TC32<int> &);
}